name: aports

on:
  push:
    branches:
      - main
      - actions/abuild/*
  schedule:
    - cron:  '0 9 * * *'
  workflow_dispatch:

jobs:
  build:
    name: Build Latest Release
    runs-on: ubuntu-20.04
    timeout-minutes: 15

    strategy:
      fail-fast: false
      matrix:
        include:
          - { github-repo: jesseduffield/lazydocker,      package-path: community/lazydocker }
          - { github-repo: jesseduffield/lazygit, package-path: community/lazygit }
          - { github-repo: DNS-OARC/dnsperf,   package-path: testing/dnsperf }

    steps:
    - name: Resolve package and release versions
      id: resolve_versions
      env:
        GITHUB_REPO: ${{ matrix.github-repo }}
        PACKAGE_PATH: ${{ matrix.package-path }}
      run: |
        #!/bin/sh
        set -euo pipefail

        PACKAGE_VERSION=$(curl -s https://raw.githubusercontent.com/alpinelinux/aports/master/$PACKAGE_PATH/APKBUILD | grep "pkgver=" | sed -E 's/pkgver=//g')
        RELEASE_VERSION=$(curl -s https://api.github.com/repos/$GITHUB_REPO/releases/latest | jq -r .tag_name | tr -d 'v')

        if ruby -e "exit Gem::Version.new('$RELEASE_VERSION') > Gem::Version.new('$PACKAGE_VERSION')"; then
          echo ::set-output name=have_new_version::true
          echo ::set-output name=package_path::"$PACKAGE_PATH"
          echo ::set-output name=package_version::"$PACKAGE_VERSION"
          echo ::set-output name=release_version::"$RELEASE_VERSION"
          echo ::set-output name=branch_name::"$PACKAGE_PATH-to-$RELEASE_VERSION"
          echo ::set-output name=commit_message::"$PACKAGE_PATH: upgrade to $RELEASE_VERSION"
        else
          echo ::set-output name=have_new_version::false
        fi
    - name: Check out aports
      if: steps.resolve_versions.outputs.have_new_version == 'true'
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        repository: alpinelinux/aports
    - name: Try building the new release version
      if: steps.resolve_versions.outputs.have_new_version == 'true'
      uses: acj/action-abuild@master
      with:
        PACKAGE_PATH: ${{ steps.resolve_versions.outputs.package_path }}
        RELEASE_VERSION: ${{ steps.resolve_versions.outputs.release_version }}
    - name: Create a branch with updated package version
      id: create_branch
      if: steps.resolve_versions.outputs.have_new_version == 'true'
      env:
        BRANCH_NAME: ${{ steps.resolve_versions.outputs.branch_name }}
        COMMIT_MESSAGE: ${{ steps.resolve_versions.outputs.commit_message }}
        COMMIT_AUTHOR_NAME: 'Thomas Deutsch'
        COMMIT_AUTHOR_EMAIL: 'thomas@tuxpeople.org'
        FAIL_IF_BRANCH_EXISTS: 'false'
      run: |
        #!/bin/sh

        set -eu

        # Defaults to keep git happy
        git config --global user.email "${COMMIT_AUTHOR_EMAIL}"
        git config --global user.name "${COMMIT_AUTHOR_NAME}"

        git remote add gitlab https://oauth2:${{ secrets.GITLAB_TOKEN }}@gitlab.alpinelinux.org/tuxpeople/aports.git

        set +e
        # Ensure existing remote branch (if any) is visible
        git remote set-branches gitlab "$BRANCH_NAME"
        git fetch gitlab

        git show-ref --verify --quiet refs/remotes/gitlab/"$BRANCH_NAME"
        branch_exists=$?
        set -e

        if [ $branch_exists -eq 0 ]; then
          echo ::set-output name=branch_name_already_exists::true
          if [ "$FAIL_IF_BRANCH_EXISTS" == "true" ]; then
            echo "Branch $BRANCH_NAME already exists"
            exit 1
          else
            exit 0
          fi
        fi

        echo ::set-output name=branch_name_already_exists::false

        cd $GITHUB_WORKSPACE
        if ! git diff --quiet; then
          git checkout -b $BRANCH_NAME

          git commit -a -m "$COMMIT_MESSAGE" --author="$COMMIT_AUTHOR_NAME <$COMMIT_AUTHOR_EMAIL>"

          git push --set-upstream gitlab $BRANCH_NAME
        else
          echo "Working tree clean. Nothing to commit."
        fi
    - name: Create merge request
      if: steps.resolve_versions.outputs.have_new_version == 'true' && steps.create_branch.outputs.branch_name_already_exists != 'true'
      env:
        BRANCH_NAME: ${{ steps.resolve_versions.outputs.branch_name }}
        COMMIT_MESSAGE: ${{ steps.resolve_versions.outputs.commit_message }}
        GITLAB_PROJECT_ID: 1861
      run: |
        #!/bin/sh

        set -eu

        private_token="${{ secrets.GITLAB_TOKEN }}"
        body="{
          \"id\": \"$GITLAB_PROJECT_ID\",
          \"source_branch\": \"$BRANCH_NAME\",
          \"target_branch\": \"master\",
          \"target_project_id\": 1,
          \"remove_source_branch\": true,
          \"title\": \"$COMMIT_MESSAGE\",
          \"work_in_progress\": false,
          \"allow_collaboration\": true
        }"

        curl --silent -d "$body" "https://gitlab.alpinelinux.org/api/v4/projects/$GITLAB_PROJECT_ID/merge_requests" \
            --header "PRIVATE-TOKEN:${private_token}" \
            --header "Content-type: application/json"
    - name: Discord notification
      if: steps.resolve_versions.outputs.have_new_version == 'true'
      env:
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
      run: |
        branch_name="${{ steps.resolve_versions.outputs.branch_name }}"
        branch_already_exists=${{ steps.create_branch.outputs.branch_name_already_exists == 'true' }}
        # https://jasonloong.com/2018/sending-linux-variables-to-discord-webhook-from-linux-bash-shell-script/
        if [ "$branch_already_exists" == "true" ]; then
          curl -H "Content-Type: application/json" -X POST -d "{\"content\": \"New version of ${{ github.workflow }} is available, but branch '$branch_name' already exists\"}" $DISCORD_WEBHOOK_URL
        else
          PR_URL="https://github.com/tuxpeople/aports/pull/new/$branch_name"
          curl -H "Content-Type: application/json" -X POST -d "{\"content\": \"New branch for ${{ github.workflow }} created: $PR_URL\"}" $DISCORD_WEBHOOK_URL
        fi
